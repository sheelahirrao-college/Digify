{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport web3 from './web3';\nimport ipfs from './ipfs';\nimport storehash from './storehash';\nimport { Button } from 'reactstrap';\nimport { Tabs, Tab, Col, Nav, Row } from 'react-bootstrap';\nimport './styles.css';\nimport Particles from \"react-tsparticles\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      ipfsHash: null,\n      buffer: '',\n      buffer2: '',\n      ethAddress: '',\n      transactionHash: '',\n      txReceipt: '',\n      add_rec: '',\n      issuee_data_1: [],\n      issuee_data_2: [],\n      cert_hash: '',\n      str1: '',\n      str2: '',\n      str3: '',\n      str4: '',\n      my_acc: ''\n    };\n\n    _this.recipientChange = function (event) {\n      _this.setState({\n        add_rec: event.target.value\n      });\n    };\n\n    _this.hashChange = function (event) {\n      _this.setState({\n        cert_hash: event.target.value\n      });\n    };\n\n    _this.captureFile = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    };\n\n    _this.convertToBuffer = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(reader) {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer = _context.sent;\n\n                //set this buffer-using es6 syntax\n                _this.setState({\n                  buffer: buffer\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.captureFile2 = function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer2(reader);\n      };\n    };\n\n    _this.convertToBuffer2 = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(reader) {\n        var buffer2;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Buffer.from(reader.result);\n\n              case 2:\n                buffer2 = _context2.sent;\n\n                //set this buffer-using es6 syntax\n                _this.setState({\n                  buffer2: buffer2\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onClick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n\n              _this.setState({\n                blockNumber: \"waiting..\"\n              });\n\n              _this.setState({\n                gasUsed: \"waiting...\"\n              });\n\n              _context3.next = 5;\n              return web3.eth.getTransactionReceipt(_this.state.transactionHash, function (err, txReceipt) {\n                console.log(err, txReceipt);\n\n                _this.setState({\n                  txReceipt: txReceipt\n                });\n              });\n\n            case 5:\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.log(_context3.t0);\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[0, 7]]);\n    }));\n\n    _this.getHash = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                event.preventDefault();\n                _context4.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context4.sent;\n                _context4.next = 6;\n                return ipfs.add(_this.state.buffer2, function (err, ipfsHash) {\n                  console.log(err, ipfsHash);\n                  var iphash = ipfsHash[0].hash;\n                  storehash.methods.is_cert_in_blockchain(iphash).call({\n                    from: accounts[0]\n                  }, function (error, boolv) {\n                    var iscert = _this.refs.ll2;\n\n                    if (boolv == true) {\n                      iscert.append(\"This certificate is in Ethereum Blockchain\");\n                      storehash.methods.get_from_cert(iphash).call({\n                        from: accounts[0]\n                      }, function (error, str) {\n                        _this.setState({\n                          str3: str[0]\n                        });\n\n                        _this.setState({\n                          str4: str[1]\n                        });\n                      });\n                    } else {\n                      iscert.append(\"This certificate is not in Ethereum Blockchain\");\n                    }\n                  });\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    _this.onSubmit = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(event) {\n        var accounts, ethAddress;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                event.preventDefault(); //bring in user's metamask account address\n\n                _context5.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context5.sent;\n                _context5.next = 6;\n                return storehash.options.address;\n\n              case 6:\n                ethAddress = _context5.sent;\n\n                _this.setState({\n                  ethAddress: ethAddress\n                }); //save document to IPFS,return its hash#, and set hash# to state\n\n\n                _context5.next = 10;\n                return ipfs.add(_this.state.buffer, function (err, ipfsHash) {\n                  console.log(err, ipfsHash); //setState by setting ipfsHash to ipfsHash[0].hash\n\n                  //setState by setting ipfsHash to ipfsHash[0].hash\n                  _this.setState({\n                    ipfsHash: ipfsHash[0].hash\n                  });\n\n                  storehash.methods.issue_cert(_this.state.add_rec, _this.state.ipfsHash).send({\n                    from: accounts[0]\n                  }, function (error, transactionHash) {\n                    console.log(transactionHash);\n\n                    _this.setState({\n                      transactionHash: transactionHash\n                    });\n                  });\n                });\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x4) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.show_acc = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context6.sent;\n\n                _this.setState({\n                  my_acc: accounts[0]\n                });\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    _this.show_cert_2 = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context7.sent;\n                storehash.methods.issuee_cert_cnt(accounts[0]).call({\n                  from: accounts[0]\n                }, function (error, result) {\n                  var len = parseInt(result);\n\n                  for (var i = 0; i < len; i++) {\n                    var i_data1 = [];\n                    var i_data2 = [];\n                    storehash.methods.get_cert_issuee(i).call({\n                      from: accounts[0]\n                    }, function (error, ans) {\n                      i_data1.push(ans[0]);\n                      i_data2.push(ans[1]);\n                      var cert_table = _this.refs.cert_table_1;\n                      cert_table.append(\"ISSUER : \" + ans[0] + \" CERTIFICATE_HASH : \" + ans[1] + \" ______________________________________________________________________________ CERTIFICATE_LINK : gateway.ipfs.io/ipfs/\" + ans[1] + \" _______________________________________________________________________________________________________________________________ \"); // console.log(i_data1[0]);\n                      // console.log(i_data2[0]);\n                    }); // console.log(i_data1);\n\n                    _this.setState({\n                      issuee_data_1: i_data1\n                    });\n\n                    _this.state.issuee_data_1.map(function (item) {\n                      return console.log(item);\n                    }); // console.log(x[0]);\n\n\n                    _this.setState({\n                      issuee_data_2: i_data2\n                    });\n\n                    var cert_table = _this.refs.cert_table_1;\n                    cert_table.append(\"\");\n                  }\n                });\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      return function (_x6) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    _this.show_cert_3 = /*#__PURE__*/function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context8.sent;\n                storehash.methods.issuer_cert_cnt(accounts[0]).call({\n                  from: accounts[0]\n                }, function (error, result) {\n                  var len = parseInt(result);\n\n                  for (var i = 0; i < len; i++) {\n                    var i_data1 = [];\n                    var i_data2 = [];\n                    storehash.methods.get_cert_issuer(i).call({\n                      from: accounts[0]\n                    }, function (error, ans) {\n                      i_data1.push(ans[0]);\n                      i_data2.push(ans[1]);\n                      var cert_table = _this.refs.cert_table_2;\n                      cert_table.append(\"RECIPIENT : \" + ans[0] + \" CERTIFICATE_HASH : \" + ans[1] + \" ______________________________________________________________________________ CERTIFICATE_LINK : gateway.ipfs.io/ipfs/\" + ans[1] + \" _______________________________________________________________________________________________________________________________ \"); // console.log(i_data1[0]);\n                      // console.log(i_data2[0]);\n                    });\n                    var cert_table = _this.refs.cert_table_2;\n                    cert_table.append(\"\");\n                  }\n                });\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function (_x7) {\n        return _ref8.apply(this, arguments);\n      };\n    }();\n\n    _this.onVerify = /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(event) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                event.preventDefault();\n                _context9.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context9.sent;\n                storehash.methods.is_cert_in_blockchain(_this.state.cert_hash).call({\n                  from: accounts[0]\n                }, function (error, boolv) {\n                  var iscert = _this.refs.ll;\n\n                  if (boolv == true) {\n                    iscert.append(\"This certificate is in Ethereum Blockchain\");\n                    storehash.methods.get_from_cert(_this.state.cert_hash).call({\n                      from: accounts[0]\n                    }, function (error, str) {\n                      _this.setState({\n                        str1: str[0]\n                      });\n\n                      _this.setState({\n                        str2: str[1]\n                      });\n                    });\n                  } else {\n                    iscert.append(\"This certificate is not in Ethereum Blockchain\");\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      return function (_x8) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Particles, {\n        id: \"tsparticles\",\n        url: \"http://foo.bar/particles.json\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 3\n        }\n      }) //   <div className=\"App\">\n      //     <header className=\"App-header\">\n      //         <h1 className=\"project_title\">Digify</h1>\n      //         <h3 className=\"project_subtitle\">Blockchain Based Certification</h3>\n      //     </header> \n      //     <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\n      //       <Row>\n      //         <Col sm={6}>\n      //           <Nav variant=\"pills\" className=\"flex-column\">\n      //             <Nav.Item>\n      //               <Nav.Link eventKey=\"first\">Account</Nav.Link>\n      //             </Nav.Item>\n      //             <Nav.Item>\n      //               <Nav.Link eventKey=\"second\">Send File</Nav.Link>\n      //             </Nav.Item>\n      //             <Nav.Item>\n      //               <Nav.Link eventKey=\"third\">My Issued Certificates</Nav.Link>\n      //             </Nav.Item>\n      //             <Nav.Item>\n      //               <Nav.Link eventKey=\"fourth\">Certificates Issued To Me</Nav.Link>\n      //             </Nav.Item>\n      //             <Nav.Item>\n      //               <Nav.Link eventKey=\"fifth\">Verify Certificate</Nav.Link>\n      //             </Nav.Item>\n      //             <Nav.Item>\n      //               <Nav.Link eventKey=\"sixth\">Search Certificate</Nav.Link>\n      //             </Nav.Item>\n      //           </Nav>\n      //         </Col>\n      //         <Col sm={6}>\n      //           <Tab.Content>\n      //             <Tab.Pane eventKey=\"first\">\n      //               <div>\n      //                 <p>Your Account: {this.state.my_acc}</p> \n      //                 <Button onClick = {this.show_acc}> Show Account </Button>\n      //               </div>\n      //             </Tab.Pane>\n      //             <Tab.Pane eventKey=\"second\">\n      //               <grid>\n      //                 <h3> Choose file to send to IPFS </h3>\n      //                   <form onSubmit={this.onSubmit}>\n      //                     <label>recipient address:\n      //                       <input\n      //                         type = \"text\" id=\"add_rec\" onChange = {this.recipientChange}\n      //                       />\n      //                     </label>\n      //                     <br></br>\n      //                     <input\n      //                       type = \"file\"\n      //                       onChange = {this.captureFile}\n      //                     />\n      //                     <Button\n      //                       bsStyle=\"primary\"\n      //                       type=\"submit\">\n      //                       Send it\n      //                     </Button>\n      //                   </form>\n      //                   <hr/>\n      //                   <table bordered responsive>\n      //                     <thead>\n      //                       <tr>\n      //                         <th>Tx Receipt Category</th>\n      //                         <th> </th>\n      //                         <th>Values</th>\n      //                       </tr>\n      //                     </thead>\n      //                     <tbody>\n      //                       <tr>\n      //                         <td>IPFS Hash stored on Ethereum</td>\n      //                         <td> : </td>\n      //                         <td>{this.state.ipfsHash}</td>\n      //                       </tr>\n      //                       <tr>\n      //                         <td>Ethereum Contract Address</td>\n      //                         <td> : </td>\n      //                         <td>{this.state.ethAddress}</td>\n      //                       </tr>\n      //                       <tr>\n      //                         <td>Tx # </td>\n      //                         <td> : </td>\n      //                         <td>{this.state.transactionHash}</td>\n      //                       </tr>\n      //                     </tbody>\n      //                 </table>\n      //               </grid>\n      //             </Tab.Pane>\n      //             <Tab.Pane eventKey=\"third\">\n      //               <div>\n      //                 <hr/>\n      //                 <h1>My Issued certificates: </h1>\n      //                 <br/>\n      //                 <p id=\"accountAddress\"></p><br/>\n      //                   <Button onClick = {this.show_cert_3}> Show Certificate </Button>\n      //                   <table ref=\"cert_table_2\">\n      //                   </table>     \n      //               </div>\n      //             </Tab.Pane>\n      //             <Tab.Pane eventKey=\"fourth\">\n      //               <div>\n      //                 <hr/>\n      //                 <h1>Certificates issued to me: </h1>\n      //                 <br/>\n      //                 <p id=\"accountAddress\"></p><br/>\n      //                   <Button onClick = {this.show_cert_2}> Show Certificate </Button>\n      //                   <table ref=\"cert_table_1\">\n      //                   </table>\n      //               </div>\n      //             </Tab.Pane>\n      //             <Tab.Pane eventKey=\"fifth\">\n      //               <div>\n      //                 <hr/>\n      //                 <h3> Verify Certificate</h3>\n      //                 <h4>Search By Certificate Hash :</h4>\n      //                 <form onSubmit={this.onVerify}>\n      //                   <label>Enter Certificate hash:\n      //                     <input\n      //                       type = \"text\" id=\"input\" onChange = {this.hashChange}\n      //                     />\n      //                   </label>\n      //                   <br></br>\n      //                   <Button\n      //                     bsStyle=\"primary\"\n      //                     type=\"submit\">\n      //                     Verify it\n      //                   </Button>\n      //                 </form>\n      //                 <p ref=\"ll\"></p>\n      //                 <p>Issuer Address - {this.state.str1}</p>\n      //                 <br/>\n      //                 <p>Recipient Address - {this.state.str2}</p>\n      //                   <br/>\n      //               </div>\n      //             </Tab.Pane>\n      //             <Tab.Pane eventKey=\"sixth\">\n      //               <h4>Search By Certificate :</h4>\n      //               <form onSubmit={this.getHash}>\n      //                 <br></br>\n      //                 <input\n      //                   type = \"file\"\n      //                   onChange = {this.captureFile2}\n      //                 />\n      //                 <br/><br/>\n      //                 <Button\n      //                   bsStyle=\"primary\"\n      //                   type=\"submit\">\n      //                   Verify it\n      //                 </Button>\n      //               </form>\n      //               <p ref=\"ll2\"></p>\n      //               <p>Issuer Address - {this.state.str3}</p>\n      //               <br/>\n      //               <p>Recipient Address - {this.state.str4}</p>\n      //             </Tab.Pane>\n      //           </Tab.Content>\n      //         </Col>\n      //       </Row>\n      //     </Tab.Container>\n      // </div>\n      ;\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"names":["React","Component","web3","ipfs","storehash","Button","Tabs","Tab","Col","Nav","Row","Particles","App","state","ipfsHash","buffer","buffer2","ethAddress","transactionHash","txReceipt","add_rec","issuee_data_1","issuee_data_2","cert_hash","str1","str2","str3","str4","my_acc","recipientChange","event","setState","target","value","hashChange","captureFile","stopPropagation","preventDefault","file","files","reader","window","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","result","captureFile2","convertToBuffer2","onClick","blockNumber","gasUsed","eth","getTransactionReceipt","err","console","log","getHash","getAccounts","accounts","add","iphash","hash","methods","is_cert_in_blockchain","call","error","boolv","iscert","refs","ll2","append","get_from_cert","str","onSubmit","options","address","issue_cert","send","show_acc","show_cert_2","issuee_cert_cnt","len","parseInt","i","i_data1","i_data2","get_cert_issuee","ans","push","cert_table","cert_table_1","map","item","show_cert_3","issuer_cert_cnt","get_cert_issuer","cert_table_2","onVerify","ll"],"sources":["C:/Users/Sheel/Downloads/MP/Ethereum_Blockchain_project/src/App.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport web3 from './web3';\r\nimport ipfs from './ipfs';\r\nimport storehash from './storehash';\r\nimport { Button } from 'reactstrap';\r\nimport { Tabs, Tab, Col, Nav, Row } from 'react-bootstrap';\r\nimport './styles.css';\r\nimport Particles from \"react-tsparticles\";\r\n\r\n\r\nclass App extends Component {\r\n\r\nstate = {\r\n      ipfsHash:null,\r\n      buffer:'',\r\n      buffer2:'',\r\n      ethAddress:'',\r\n      transactionHash:'',\r\n      txReceipt: '',\r\n      add_rec:'',\r\n      issuee_data_1: [],\r\n      issuee_data_2: [],\r\n      cert_hash:'',\r\n      str1:'',\r\n      str2:'',\r\n      str3:'',\r\n      str4:'',\r\n      my_acc:''\r\n    };\r\n\r\nrecipientChange = (event) => {\r\n  this.setState({add_rec: event.target.value});\r\n}\r\nhashChange = (event) => {\r\n  this.setState({cert_hash: event.target.value});\r\n}\r\n//Take file input from user\r\ncaptureFile =(event) => {\r\n        event.stopPropagation()\r\n        event.preventDefault()\r\n        const file = event.target.files[0]\r\n        let reader = new window.FileReader()\r\n        reader.readAsArrayBuffer(file)\r\n        reader.onloadend = () => this.convertToBuffer(reader)\r\n      };\r\n\r\n//Convert the file to buffer to store on IPFS\r\n convertToBuffer = async(reader) => {\r\n      //file is converted to a buffer for upload to IPFS\r\n        const buffer = await Buffer.from(reader.result);\r\n      //set this buffer-using es6 syntax\r\n        this.setState({buffer});\r\n    };\r\n\r\n\r\n    captureFile2 =(event) => {\r\n        event.stopPropagation()\r\n        event.preventDefault()\r\n        const file = event.target.files[0]\r\n        let reader = new window.FileReader()\r\n        reader.readAsArrayBuffer(file)\r\n        reader.onloadend = () => this.convertToBuffer2(reader)\r\n      };\r\n\r\n//Convert the file to buffer to store on IPFS\r\n convertToBuffer2 = async(reader) => {\r\n      //file is converted to a buffer for upload to IPFS\r\n        const buffer2 = await Buffer.from(reader.result);\r\n      //set this buffer-using es6 syntax\r\n        this.setState({buffer2});\r\n    };\r\n\r\nonClick = async () => {\r\ntry{\r\n        this.setState({blockNumber:\"waiting..\"});\r\n        this.setState({gasUsed:\"waiting...\"});\r\n\r\nawait web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt)=>{\r\n          console.log(err,txReceipt);\r\n          this.setState({txReceipt});\r\n        });\r\n      }\r\ncatch(error){\r\n      console.log(error);\r\n    }\r\n}\r\ngetHash= async (event) => {\r\n    event.preventDefault();\r\n    const accounts = await web3.eth.getAccounts();\r\n    await ipfs.add(this.state.buffer2, (err, ipfsHash) => {\r\n        console.log(err,ipfsHash);\r\n        const iphash= ipfsHash[0].hash;\r\n        storehash.methods.is_cert_in_blockchain(iphash).call({from: accounts[0]}, (error, boolv) => {\r\n          var iscert = this.refs.ll2;\r\n          if(boolv==true){\r\n            iscert.append(\"This certificate is in Ethereum Blockchain\");\r\n            storehash.methods.get_from_cert(iphash).call({from: accounts[0]}, (error, str) => {\r\n              this.setState({str3:str[0]});\r\n              this.setState({str4:str[1]});\r\n            });\r\n          }\r\n          else{\r\n            iscert.append(\"This certificate is not in Ethereum Blockchain\");\r\n          }\r\n    })\r\n  })    \r\n};\r\n\r\nonSubmit = async (event) => {\r\n      event.preventDefault();\r\n\r\n//bring in user's metamask account address\r\n      const accounts = await web3.eth.getAccounts();\r\n    //obtain contract address from storehash.js\r\n      const ethAddress= await storehash.options.address;\r\n      this.setState({ethAddress});\r\n    //save document to IPFS,return its hash#, and set hash# to state\r\n      await ipfs.add(this.state.buffer, (err, ipfsHash) => {\r\n        console.log(err,ipfsHash);\r\n        //setState by setting ipfsHash to ipfsHash[0].hash\r\n        this.setState({ ipfsHash:ipfsHash[0].hash });\r\n        storehash.methods.issue_cert(this.state.add_rec,this.state.ipfsHash).send({\r\n          from: accounts[0]\r\n        }, (error, transactionHash) => {\r\n          console.log(transactionHash);\r\n          this.setState({transactionHash});\r\n        });\r\n      })\r\n    };\r\n    show_acc= async (event) =>{\r\n      const accounts = await web3.eth.getAccounts();\r\n      this.setState({my_acc:accounts[0]});\r\n    }\r\n    show_cert_2 = async (event) => {\r\n      const accounts = await web3.eth.getAccounts();\r\n      storehash.methods.issuee_cert_cnt(accounts[0]).call({from: accounts[0]},(error, result) => {\r\n        const len = parseInt(result);\r\n        for(let i =0;i<len;i++){\r\n          var i_data1=[];\r\n          var i_data2=[];\r\n        storehash.methods.get_cert_issuee(i).call({from: accounts[0]}, (error, ans) => {\r\n          i_data1.push(ans[0]);\r\n          i_data2.push(ans[1]);\r\n\r\n          var cert_table = this.refs.cert_table_1;\r\n          cert_table.append(\"ISSUER : \"+ans[0]+\" CERTIFICATE_HASH : \"+ans[1]+\" ______________________________________________________________________________ CERTIFICATE_LINK : gateway.ipfs.io/ipfs/\"+ans[1]+\" _______________________________________________________________________________________________________________________________ \");\r\n        // console.log(i_data1[0]);\r\n          // console.log(i_data2[0]);\r\n        })\r\n        // console.log(i_data1);\r\n        this.setState({issuee_data_1:i_data1});\r\n        this.state.issuee_data_1.map(item=>(console.log(item)));\r\n        // console.log(x[0]);\r\n        this.setState({issuee_data_2:i_data2});\r\n\r\n        var cert_table = this.refs.cert_table_1;\r\n        cert_table.append(\"\");\r\n      }\r\n      });\r\n\r\n  };\r\n\r\n  show_cert_3 = async (event) => {\r\n    const accounts = await web3.eth.getAccounts();\r\n    storehash.methods.issuer_cert_cnt(accounts[0]).call({from: accounts[0]},(error, result) => {\r\n      const len = parseInt(result);\r\n      for(let i =0;i<len;i++){\r\n        var i_data1=[];\r\n        var i_data2=[];\r\n      storehash.methods.get_cert_issuer(i).call({from: accounts[0]}, (error, ans) => {\r\n        i_data1.push(ans[0]);\r\n        i_data2.push(ans[1]);\r\n\r\n        var cert_table = this.refs.cert_table_2;\r\n        cert_table.append(\"RECIPIENT : \"+ans[0]+\" CERTIFICATE_HASH : \"+ans[1]+\" ______________________________________________________________________________ CERTIFICATE_LINK : gateway.ipfs.io/ipfs/\"+ans[1]+\" _______________________________________________________________________________________________________________________________ \");\r\n        // console.log(i_data1[0]);\r\n        // console.log(i_data2[0]);\r\n      })\r\n\r\n      var cert_table = this.refs.cert_table_2;\r\n      cert_table.append(\"\");\r\n    }\r\n    });\r\n\r\n};\r\n  \r\n  onVerify = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n    storehash.methods.is_cert_in_blockchain(this.state.cert_hash).call({from: accounts[0]}, (error, boolv) => {\r\n      var iscert = this.refs.ll;\r\n      if(boolv==true){\r\n        iscert.append(\"This certificate is in Ethereum Blockchain\");\r\n        storehash.methods.get_from_cert(this.state.cert_hash).call({from: accounts[0]}, (error, str) => {\r\n          this.setState({str1:str[0]});\r\n          this.setState({str2:str[1]});\r\n        });\r\n      }\r\n      else{\r\n        iscert.append(\"This certificate is not in Ethereum Blockchain\");\r\n      }\r\n\r\n    });\r\n  };\r\n\r\nrender() {\r\nreturn (\r\n  <Particles id=\"tsparticles\" url=\"http://foo.bar/particles.json\" />\r\n\r\n      //   <div className=\"App\">\r\n      //     <header className=\"App-header\">\r\n      //         <h1 className=\"project_title\">Digify</h1>\r\n      //         <h3 className=\"project_subtitle\">Blockchain Based Certification</h3>\r\n      //     </header> \r\n      //     <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n      //       <Row>\r\n      //         <Col sm={6}>\r\n      //           <Nav variant=\"pills\" className=\"flex-column\">\r\n      //             <Nav.Item>\r\n      //               <Nav.Link eventKey=\"first\">Account</Nav.Link>\r\n      //             </Nav.Item>\r\n      //             <Nav.Item>\r\n      //               <Nav.Link eventKey=\"second\">Send File</Nav.Link>\r\n      //             </Nav.Item>\r\n      //             <Nav.Item>\r\n      //               <Nav.Link eventKey=\"third\">My Issued Certificates</Nav.Link>\r\n      //             </Nav.Item>\r\n      //             <Nav.Item>\r\n      //               <Nav.Link eventKey=\"fourth\">Certificates Issued To Me</Nav.Link>\r\n      //             </Nav.Item>\r\n      //             <Nav.Item>\r\n      //               <Nav.Link eventKey=\"fifth\">Verify Certificate</Nav.Link>\r\n      //             </Nav.Item>\r\n      //             <Nav.Item>\r\n      //               <Nav.Link eventKey=\"sixth\">Search Certificate</Nav.Link>\r\n      //             </Nav.Item>\r\n      //           </Nav>\r\n      //         </Col>\r\n      //         <Col sm={6}>\r\n      //           <Tab.Content>\r\n      //             <Tab.Pane eventKey=\"first\">\r\n      //               <div>\r\n      //                 <p>Your Account: {this.state.my_acc}</p> \r\n      //                 <Button onClick = {this.show_acc}> Show Account </Button>\r\n      //               </div>\r\n      //             </Tab.Pane>\r\n      //             <Tab.Pane eventKey=\"second\">\r\n      //               <grid>\r\n      //                 <h3> Choose file to send to IPFS </h3>\r\n      //                   <form onSubmit={this.onSubmit}>\r\n      //                     <label>recipient address:\r\n      //                       <input\r\n      //                         type = \"text\" id=\"add_rec\" onChange = {this.recipientChange}\r\n      //                       />\r\n      //                     </label>\r\n      //                     <br></br>\r\n      //                     <input\r\n      //                       type = \"file\"\r\n      //                       onChange = {this.captureFile}\r\n      //                     />\r\n      //                     <Button\r\n      //                       bsStyle=\"primary\"\r\n      //                       type=\"submit\">\r\n      //                       Send it\r\n      //                     </Button>\r\n      //                   </form>\r\n      //                   <hr/>\r\n      //                   <table bordered responsive>\r\n      //                     <thead>\r\n      //                       <tr>\r\n      //                         <th>Tx Receipt Category</th>\r\n      //                         <th> </th>\r\n      //                         <th>Values</th>\r\n      //                       </tr>\r\n      //                     </thead>\r\n      //                     <tbody>\r\n      //                       <tr>\r\n      //                         <td>IPFS Hash stored on Ethereum</td>\r\n      //                         <td> : </td>\r\n      //                         <td>{this.state.ipfsHash}</td>\r\n      //                       </tr>\r\n      //                       <tr>\r\n      //                         <td>Ethereum Contract Address</td>\r\n      //                         <td> : </td>\r\n      //                         <td>{this.state.ethAddress}</td>\r\n      //                       </tr>\r\n      //                       <tr>\r\n      //                         <td>Tx # </td>\r\n      //                         <td> : </td>\r\n      //                         <td>{this.state.transactionHash}</td>\r\n      //                       </tr>\r\n      //                     </tbody>\r\n      //                 </table>\r\n      //               </grid>\r\n      //             </Tab.Pane>\r\n      //             <Tab.Pane eventKey=\"third\">\r\n      //               <div>\r\n      //                 <hr/>\r\n      //                 <h1>My Issued certificates: </h1>\r\n      //                 <br/>\r\n      //                 <p id=\"accountAddress\"></p><br/>\r\n      //                   <Button onClick = {this.show_cert_3}> Show Certificate </Button>\r\n      //                   <table ref=\"cert_table_2\">\r\n      //                   </table>     \r\n      //               </div>\r\n      //             </Tab.Pane>\r\n      //             <Tab.Pane eventKey=\"fourth\">\r\n      //               <div>\r\n      //                 <hr/>\r\n      //                 <h1>Certificates issued to me: </h1>\r\n      //                 <br/>\r\n      //                 <p id=\"accountAddress\"></p><br/>\r\n      //                   <Button onClick = {this.show_cert_2}> Show Certificate </Button>\r\n      //                   <table ref=\"cert_table_1\">\r\n      //                   </table>\r\n      //               </div>\r\n      //             </Tab.Pane>\r\n      //             <Tab.Pane eventKey=\"fifth\">\r\n      //               <div>\r\n      //                 <hr/>\r\n      //                 <h3> Verify Certificate</h3>\r\n      //                 <h4>Search By Certificate Hash :</h4>\r\n      //                 <form onSubmit={this.onVerify}>\r\n      //                   <label>Enter Certificate hash:\r\n      //                     <input\r\n      //                       type = \"text\" id=\"input\" onChange = {this.hashChange}\r\n      //                     />\r\n      //                   </label>\r\n      //                   <br></br>\r\n      //                   <Button\r\n      //                     bsStyle=\"primary\"\r\n      //                     type=\"submit\">\r\n      //                     Verify it\r\n      //                   </Button>\r\n      //                 </form>\r\n      //                 <p ref=\"ll\"></p>\r\n\r\n      //                 <p>Issuer Address - {this.state.str1}</p>\r\n      //                 <br/>\r\n      //                 <p>Recipient Address - {this.state.str2}</p>\r\n      //                   <br/>\r\n      //               </div>\r\n      //             </Tab.Pane>\r\n      //             <Tab.Pane eventKey=\"sixth\">\r\n      //               <h4>Search By Certificate :</h4>\r\n      //               <form onSubmit={this.getHash}>\r\n      //                 <br></br>\r\n      //                 <input\r\n      //                   type = \"file\"\r\n      //                   onChange = {this.captureFile2}\r\n      //                 />\r\n      //                 <br/><br/>\r\n      //                 <Button\r\n      //                   bsStyle=\"primary\"\r\n      //                   type=\"submit\">\r\n      //                   Verify it\r\n      //                 </Button>\r\n      //               </form>\r\n      //               <p ref=\"ll2\"></p>\r\n      //               <p>Issuer Address - {this.state.str3}</p>\r\n      //               <br/>\r\n      //               <p>Recipient Address - {this.state.str4}</p>\r\n      //             </Tab.Pane>\r\n      //           </Tab.Content>\r\n      //         </Col>\r\n      //       </Row>\r\n      //     </Tab.Container>\r\n      // </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}