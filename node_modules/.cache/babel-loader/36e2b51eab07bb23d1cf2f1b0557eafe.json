{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Sheel\\\\Downloads\\\\MP\\\\Ethereum_Blockchain_project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { getStyleFromHsl } from \"tsparticles-engine\";\nvar currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n\nfunction replaceColorSvg(imageShape, color, opacity) {\n  var svgData = imageShape.svgData;\n\n  if (!svgData) {\n    return \"\";\n  }\n\n  var colorStyle = getStyleFromHsl(color, opacity);\n\n  if (svgData.includes(\"fill\")) {\n    return svgData.replace(currentColorRegex, function () {\n      return colorStyle;\n    });\n  }\n\n  var preFillIndex = svgData.indexOf(\">\");\n  return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat(colorStyle, \"\\\"\").concat(svgData.substring(preFillIndex));\n}\n\nexport function loadImage(_x) {\n  return _loadImage.apply(this, arguments);\n}\n\nfunction _loadImage() {\n  _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              image.loading = true;\n              var img = new Image();\n              img.addEventListener(\"load\", function () {\n                image.element = img;\n                image.loading = false;\n                resolve();\n              });\n              img.addEventListener(\"error\", function () {\n                image.error = true;\n                image.loading = false;\n                console.error(\"Error tsParticles - loading image: \".concat(image.source));\n                resolve();\n              });\n              img.src = image.source;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadImage.apply(this, arguments);\n}\n\nexport function downloadSvgImage(_x2) {\n  return _downloadSvgImage.apply(this, arguments);\n}\n\nfunction _downloadSvgImage() {\n  _downloadSvgImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(image.type !== \"svg\")) {\n              _context2.next = 4;\n              break;\n            }\n\n            _context2.next = 3;\n            return loadImage(image);\n\n          case 3:\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            image.loading = true;\n            _context2.next = 7;\n            return fetch(image.source);\n\n          case 7:\n            response = _context2.sent;\n            image.loading = false;\n\n            if (!response.ok) {\n              console.error(\"Error tsParticles - Image not found\");\n              image.error = true;\n            }\n\n            if (image.error) {\n              _context2.next = 14;\n              break;\n            }\n\n            _context2.next = 13;\n            return response.text();\n\n          case 13:\n            image.svgData = _context2.sent;\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _downloadSvgImage.apply(this, arguments);\n}\n\nexport function replaceImageColor(image, imageData, color, particle) {\n  var _a, _b, _c;\n\n  var svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1);\n  var svg = new Blob([svgColoredData], {\n    type: \"image/svg+xml\"\n  });\n  var domUrl = URL || window.URL || window.webkitURL || window;\n  var url = domUrl.createObjectURL(svg);\n  var img = new Image();\n  var imageRes = {\n    data: Object.assign(Object.assign({}, image), {\n      svgData: svgColoredData\n    }),\n    ratio: imageData.width / imageData.height,\n    replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n    source: imageData.src\n  };\n  img.addEventListener(\"load\", function () {\n    var pImage = particle.image;\n\n    if (pImage) {\n      pImage.loaded = true;\n      image.element = img;\n    }\n\n    domUrl.revokeObjectURL(url);\n  });\n  img.addEventListener(\"error\", function () {\n    domUrl.revokeObjectURL(url);\n    var img2 = Object.assign(Object.assign({}, image), {\n      error: false,\n      loading: true\n    });\n    loadImage(img2).then(function () {\n      var pImage = particle.image;\n\n      if (pImage) {\n        image.element = img2.element;\n        pImage.loaded = true;\n      }\n    });\n  });\n  img.src = url;\n  return imageRes;\n}","map":null,"metadata":{},"sourceType":"module"}